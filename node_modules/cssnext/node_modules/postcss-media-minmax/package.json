{
  "name": "postcss-media-minmax",
  "version": "1.2.0",
  "description": "Using more intuitive `>=` or `<=` instead of media queries min/max prefix.",
  "scripts": {
    "test": "tape test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/postcss/postcss-media-minmax.git"
  },
  "keywords": [
    "css",
    "css3",
    "postcss",
    "postcss-plugin",
    "media querie",
    "media queries"
  ],
  "author": {
    "name": "yisi"
  },
  "license": "MIT",
  "files": [
    "CHANGELOG.md",
    "README.md",
    "README-zh.md",
    "LICENSE",
    "index.js"
  ],
  "dependencies": {
    "postcss": "^4.1.14"
  },
  "devDependencies": {
    "tape": "^3.0.0"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-media-minmax/issues"
  },
  "homepage": "https://github.com/postcss/postcss-media-minmax",
  "readme": "# PostCSS Media Minmax\n\n[![Build Status](https://travis-ci.org/postcss/postcss-media-minmax.svg?branch=master)](https://travis-ci.org/postcss/postcss-media-minmax) \n[![NPM Downloads](https://img.shields.io/npm/dm/postcss-media-minmax.svg?style=flat)](https://www.npmjs.com/package/postcss-media-minmax) \n[![NPM Version](http://img.shields.io/npm/v/postcss-media-minmax.svg?style=flat)](https://www.npmjs.com/package/postcss-media-minmax) \n[![License](https://img.shields.io/npm/l/postcss-media-minmax.svg?style=flat)](http://opensource.org/licenses/MIT) \n\n> 写简单优雅的 Media Queries！\n\nMedia Queries 中的 `min-width` 和 `max-width` 等属性非常容易混淆，每次看到他们，我都想哭。现在[新的规范](http://dev.w3.org/csswg/mediaqueries/#mq-min-max)中，可以使用更加直观的 `>=`或`<=` 替代 media queries 中的 min-/max- 前缀。\n\n这是一个实现 [CSS Media Queries Level 4](http://dev.w3.org/csswg/mediaqueries/) Polyfill 的插件，让你现在就可以使用这些特性，妈妈再也不用担心我记不住了，鹅妹子嘤！\n\n \n[English](README.md)\n\n-----\n\n![Gif Demo](http://gtms02.alicdn.com/tps/i2/TB1UIjyGVXXXXcCaXXXx274FpXX-877-339.gif)\n\n\n## 安装\n\n    $ npm install postcss-media-minmax\n\n## 快速开始\n\n示例 1：\n\n```js\nvar fs = require('fs')\nvar postcss = require('postcss')\nvar minmax = require('postcss-media-minmax')\n\nvar css = fs.readFileSync('input.css', 'utf8')\n\nvar output = postcss()\n  .use(minmax())\n  .process(css)\n  .css\n  \nconsole.log('\\n====>Output CSS:\\n', output)  \n```\n\n或者只需：\n\n```js\nvar output = postcss(minmax())\n  .process(css)\n  .css\n```\n\ninput.css：\n\n```css\n@media screen and (width >= 500px) and (width <= 1200px) {\n  .bar {\n    display: block;\n  }\n}\n```\n\n你将得到：\n\n```css\n@media screen and (min-width: 500px) and (max-width: 1200px) {\n  .bar {\n    display: block;\n  }\n}\n```\n\n## CSS 语法\n\n### [语法](http://dev.w3.org/csswg/mediaqueries/#mq-syntax)\n\n```\n<mf-range> = <mf-name> [ '<' | '>' ]? '='? <mf-value>\n           | <mf-value> [ '<' | '>' ]? '='? <mf-name>\n           | <mf-value> '<' '='? <mf-name> '<' '='? <mf-value>\n           | <mf-value> '>' '='? <mf-name> '>' '='? <mf-value>\n```\n\nPostCSS Media Minmax 目前并没有实现 `200px >= width` 或者 `200px <= width` 这样的语法，因为这样的语法可读性并不不是太好。\n\n## [取值(Values)](http://dev.w3.org/csswg/mediaqueries/#values)\n \n**The special values:**\n\n* [<ratio>](http://dev.w3.org/csswg/mediaqueries/#typedef-ratio)\n\n    <ratio> 是一个正（非零非负）的 <integer>（整型）取值，其后跟随0个或多个空白，接着跟随一个斜线（“/”），再跟随0个或多个空白，最后跟随一个正<integer>。\n\n    ```css\n    @media screen and (device-aspect-ratio: 16 /   9) {\n      /* rules */\n    }\n\n    /* equivalent to */\n    @media screen and (device-aspect-ratio: 16/9) {\n      /* rules */\n    }\n    ```\n\n* [<mq-boolean>](http://dev.w3.org/csswg/mediaqueries/#typedef-mq-boolean)\n\n    <mq-boolean> 值是一个 0 或 1 的 <integer>（整型）取值。其他任何整数无效。注意， 在 CSS 中 -0 总是等价于 0 的，所以也作为一种有效的 <mq-boolean> 取值。  \n\n    ```css\n    @media screen and (grid: -0) {\n      /* rules */\n    }\n\n    /* equivalent to */\n    @media screen and (grid: 0) {\n      /* rules */\n    }\n    ```\n\n## 如何使用\n\n### 简写\n\n示例 1中同一个 Media features name 同时存在 `>=` 和 `<=` 时，可以简写为：\n\n```css\n@media screen and (500px <= width <= 1200px) {\n  .bar {\n    display: block;\n  }\n}\n/* 或者 */\n@media screen and (1200px >= width >= 500px) {\n  .bar {\n    display: block;\n  }\n}\n```\n\n都会得到一样的输出结果：\n\n```css\n@media screen and (min-width: 500px) and (max-width: 1200px) {\n  .bar {\n    display: block;\n  }\n}\n```\n**注意**：当 Media features name 在中间的时候，一定要保证两个 `<=` 或 `>=` 的方向一致，否则不会转换。\n\n例如在下面的示例中，width 大于等于 500px 同时又大于等于 1200px，这在语法和逻辑上都是错误的。\n\n```css\n@media screen and (1200px <= width >= 500px) {\n  .bar {\n    display: block;\n  }\n}\n```\n\n### 支持的 Media features name\n\n规范中目前以下属性支持 min-/max 前缀，PostCSS Media Minmax 全部支持自动转换。\n\n* `width`\n* `height`\n* `device-width`\n* `device-height`\n* `aspect-ratio`\n* `device-aspect-ratio`\n* `color`\n* `color-index`\n* `monochrome`\n* `resolution`\n\n\n\n### 支持在 `@custom-media` 中使用 & Node Watch\n\n```js\nvar fs = require('fs')\nvar chokidar = require('chokidar')\nvar postcss = require('postcss')\nvar minmax = require('postcss-media-minmax')\nvar customMedia = require('postcss-custom-media')\n\nvar src = 'input.css'\n\nconsole.info('Watching…\\nModify the input.css and save.')\n\n\nchokidar.watch(src, {\n  ignored: /[\\/\\\\]\\./,\n  persistent: true\n}).on('all',\n  function(event, path, stats) {\n    var css = fs.readFileSync(src, 'utf8')\n    var output = postcss()\n      .use(customMedia())\n      .use(minmax())\n      .process(css)\n      .css;\n    fs.writeFileSync('output.css', output)\n  })\n\n```\n\n\ninput.css:\n\n```css\n@custom-media --foo (width >= 20em) and (width <= 50em);\n@custom-media --bar (height >= 300px) and (height <= 600px);\n\n@media (--foo) and (--bar) {\n  \n}\n```\n\noutput.css:\n\n```css\n@media (min-width: 20em) and (max-width: 50em) and (min-height: 300px) and (max-height: 600px) {\n  \n}\n```\n\n### Grunt\n\n```js\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    postcss: {\n      options: {\n        processors: [\n          require('autoprefixer-core')({ browsers: ['> 0%'] }).postcss, //Other plugin\n          require('postcss-media-minmax')(),\n        ]\n      },\n      dist: {\n        src: ['src/*.css'],\n        dest: 'build/grunt.css'\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-postcss');\n\n  grunt.registerTask('default', ['postcss']);\n}\n```\n\n### Gulp\n\n```js\nvar gulp = require('gulp');\nvar rename = require('gulp-rename');\nvar postcss = require('gulp-postcss');\nvar selector = require('postcss-media-minmax')\nvar autoprefixer = require('autoprefixer-core')\n\ngulp.task('default', function () {\n    var processors = [\n        autoprefixer({ browsers: ['> 0%'] }), //Other plugin\n        minmax()\n    ];\n    gulp.src('src/*.css')\n        .pipe(postcss(processors))\n        .pipe(rename('gulp.css'))\n        .pipe(gulp.dest('build'))\n});\ngulp.watch('src/*.css', ['default']);\n```\n\n\n## 贡献\n\n* 安装相关的依赖模块。\n* 尊重编码风格（安装 [EditorConfig](http://editorconfig.org/)）。\n* 在[test](test)目录添加测试用例。\n* 运行测试。\n\n```\n$ git clone https://github.com/postcss/postcss-media-minmaxs.git\n$ git checkout -b patch\n$ npm install\n$ npm test\n```\n\n## 致谢\n\n* 感谢 PostCSS 作者 [Andrey Sitnik](https://github.com/ai)，带给我们如此简单易用的 CSS 语法解析工具。\n* 感谢 [Tab Atkins Jr.](http://xanthir.com/contact/) 辛苦编写了 Media Queries Level 4 规范。\n* 感谢 [@紫云飞](http://weibo.com/p/1005051708684567) 对本插件的建议和帮助。\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README-zh.md",
  "_id": "postcss-media-minmax@1.2.0",
  "_from": "postcss-media-minmax@^1.1.0"
}
